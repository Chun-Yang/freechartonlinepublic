{"version":3,"sources":["utils/getReactDataSheetDataFromData.js","utils/getChartDataFromData.js","utils/constants.js","ChartTypeSelector.js","App.js","serviceWorker.js","index.js"],"names":["getReactDataSheetDataFromData","data","_data","Object","toArray","firstRow","rows","slice","rdsFirstRow","map","value","j","className","rdsRows","row","i","concat","toConsumableArray","COLOR_SOLID","COLOR_TRANSPARENT","getChartDataFromData","_ref","chartType","_ref2","_ref2$","seriesNames","validRows","filter","rawRow","length","labels","datasets","_unzip","unzip","_unzip2","rawDataSet","index","dataset","label","borderColor","backgroundColor","fill","_ref3","CHART_TYPES","DEFAULT_REAL_DATA","DEFAULT_PADDING_DATA","times","DEFAULT_DATA","MUI_THEME","createMuiTheme","palette","primary","main","contrastText","secondary","ChartTypeSelector","onChartTypeChange","react_default","a","createElement","FormControl_default","InputLabel_default","htmlFor","Select_default","native","onChange","event","target","inputProps","name","id","key","startCase","getChartOptions","chartTitleText","title","display","text","position","elements","line","tension","DownloadButton","Button_default","variant","color","onClick","filename","link","document","download","href","getElementById","toDataURL","click","downloadImage","App","state","selectedChartType","redraw","_this2","this","Grid_default","container","spacing","styles","theme","item","xs","md","es","type","options","src_ChartTypeSelector","setState","lib_default","valueRenderer","cell","onCellsChanged","changes","forEach","col","Link_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.73c1d0ad.chunk.js","sourcesContent":["export default function getReactDataSheetDataFromData(data) {\n  const [firstRow, ...rows] = data;\n  const rdsFirstRow = firstRow.map((value, j) => ({\n    value: value == null ? null : value,\n    className: j === 0 ? \"rds-chart-name read-only\" : \"read-only\"\n  }));\n  const rdsRows = rows.map((row, i) =>\n    row.map((value, j) => ({\n      value: value == null ? null : value,\n      className: j === 0 ? \"read-only\" : \"\"\n    }))\n  );\n  return [rdsFirstRow, ...rdsRows];\n}\n","import unzip from \"lodash.unzip\";\n\nconst COLOR_SOLID = [\n  \"rgba(255,99,132)\", // red\n  \"rgba(54,162,235)\", // blue\n  \"rgba(255,206,86)\" // yellow\n];\n\nconst COLOR_TRANSPARENT = [\n  \"rgba(255,99,132, 0.5)\", // red\n  \"rgba(54,162,235, 0.5)\", // blue\n  \"rgba(255,206,86, 0.5)\" // yellow\n];\n\nexport default function getChartDataFromData(\n  [[chartName, ...seriesNames], ...rawRows],\n  chartType\n) {\n  const validRows = rawRows.filter(rawRow => rawRow[0]);\n  if (validRows.length === 0) {\n    return {\n      labels: [],\n      datasets: []\n    };\n  }\n\n  const [labels, ...rawDatasets] = unzip(validRows);\n  const datasets = rawDatasets\n    .map((rawDataSet, index) => {\n      const dataset = {\n        label: seriesNames[index],\n        data: rawDataSet\n      };\n      switch (chartType) {\n        case \"bar\":\n        case \"horizontalBar\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_SOLID[index];\n          break;\n        case \"line\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_SOLID[index];\n          dataset.fill = false;\n          break;\n        case \"radar\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_TRANSPARENT[index];\n          break;\n        default:\n          break;\n      }\n      return dataset;\n    })\n    // we do not show data on chart if there is no series name\n    .filter(({ label }) => label);\n\n  return {\n    labels,\n    datasets\n  };\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport times from \"lodash.times\";\n\n// NOTE: we do not support all charts\n// const CHART_TYPES = Object.keys(Chart.controllers);\n// CHART_TYPES.sort((x, y) => x.localeCompare(y));\n// NOTE: different charts\n// - bubble (multiple sources, specific data format: {x, y, r})\n// - scatter (multiple sources, specific data format: {x, y})\n// - bar, horizontalBar, line, radar (multiple sources)\n// - polarArea, pie, doughnut (one source or multiple source)\nexport const CHART_TYPES = [\n  \"bar\",\n  // 'bubble', // format {x, y, r}\n  // 'doughnut', // legend on labels\n  \"horizontalBar\",\n  \"line\",\n  // 'pie', // legend on labels\n  // 'polarArea', // legend on labels\n  \"radar\"\n  // 'scatter', // format {x, y}\n];\n\nconst DEFAULT_COLS = 4;\nconst DEFAULT_ROWS = 42;\nconst DEFAULT_REAL_DATA = [\n  [\"Charts Created Last Week\", \"Alice\", \"Bob\", \"Carol\"],\n  [\"Monday\", 43, 70, 67],\n  [\"Tuesday\", 88, 65, 35],\n  [\"Wednesday\", 73, 10, 66],\n  [\"Thursday\", 14, 59, 85],\n  [\"Friday\", 50, 78, 66],\n  [\"Saturday\", 59, 92, 0],\n  [\"Sunday\", 83, 27, 27]\n];\nconst DEFAULT_PADDING_DATA = times(\n  DEFAULT_ROWS - DEFAULT_REAL_DATA.length,\n  () => times(DEFAULT_COLS, () => null)\n);\n\nexport const DEFAULT_DATA = DEFAULT_REAL_DATA.concat(DEFAULT_PADDING_DATA);\n\nexport const MUI_THEME = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#36a2eb\",\n      contrastText: 'white'\n    },\n    secondary: {\n      main: \"#ff6384\"\n    }\n  }\n});\n","import React from \"react\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport Select from \"@material-ui/core/Select\";\nimport startCase from \"lodash.startcase\";\nimport { CHART_TYPES } from \"./utils/constants\";\n\nfunction ChartTypeSelector({ chartType, onChartTypeChange }) {\n  return (\n    <FormControl className=\"chart-type-selector\">\n      <InputLabel htmlFor=\"chart-type\">Chart Type</InputLabel>\n      <Select\n        native\n        value={chartType}\n        onChange={event => {\n          onChartTypeChange(event.target.value);\n        }}\n        inputProps={{\n          name: \"chart-type\",\n          id: \"chart-type\"\n        }}\n      >\n        {CHART_TYPES.map(chartType => (\n          <option value={chartType} key={chartType}>\n            {startCase(chartType)}\n          </option>\n        ))}\n      </Select>\n    </FormControl>\n  );\n}\n\nexport default ChartTypeSelector;\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Link from \"@material-ui/core/Link\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport ChartComponent from \"react-chartjs-2\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./App.css\";\nimport getReactDataSheetDataFromData from \"./utils/getReactDataSheetDataFromData\";\nimport getChartDataFromData from \"./utils/getChartDataFromData\";\nimport { CHART_TYPES, DEFAULT_DATA, MUI_THEME } from \"./utils/constants\";\nimport ChartTypeSelector from \"./ChartTypeSelector\";\n\nfunction getChartOptions(chartTitleText) {\n  const chartTitle = chartTitleText && {\n    display: true,\n    text: chartTitleText,\n    position: \"bottom\"\n  };\n  return {\n    title: chartTitle,\n    elements: {\n      line: {\n        tension: 0\n      }\n    }\n  };\n}\n\nfunction downloadImage(filename) {\n  const link = document.createElement(\"a\");\n  link.download = `${filename}.png`;\n  link.href = document.getElementById(\"chart\").toDataURL();\n  link.click();\n}\n\nfunction DownloadButton({ chartTitleText }) {\n  return (\n    <div className=\"download-btn-wrapper\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"download-btn\"\n        onClick={() => downloadImage(chartTitleText)}\n      >\n        DOWNLOAD IMAGE\n      </Button>\n    </div>\n  );\n}\n\nclass App extends Component {\n  state = {\n    selectedChartType: CHART_TYPES[0],\n    data: DEFAULT_DATA,\n    redraw: false\n  };\n\n  render() {\n    const chartTitleText = this.state.data[0][0];\n    return (\n      <div id=\"App\">\n        <Grid container spacing={24}>\n          <MuiThemeProvider theme={MUI_THEME}>\n            <Grid item xs={12} md={6}>\n              <ChartComponent\n                id=\"chart\"\n                redraw={this.state.redraw}\n                data={getChartDataFromData(\n                  this.state.data,\n                  this.state.selectedChartType\n                )}\n                type={this.state.selectedChartType}\n                options={getChartOptions(chartTitleText)}\n              />\n              <ChartTypeSelector\n                chartType={this.state.selectedChartType}\n                onChartTypeChange={selectedChartType => {\n                  this.setState({ selectedChartType, redraw: true });\n                }}\n              />\n              <DownloadButton chartTitleText={chartTitleText} />\n            </Grid>\n          </MuiThemeProvider>\n          <Grid item xs={12} md={6}>\n            <ReactDataSheet\n              data={getReactDataSheetDataFromData(this.state.data)}\n              valueRenderer={cell => cell.value}\n              onCellsChanged={changes => {\n                const data = this.state.data.map(row => [...row]);\n                changes.forEach(({ cell, row, col, value }) => {\n                  data[row][col] = value;\n                });\n                this.setState({ data, redraw: false });\n              }}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"feedback-link-wrapper\">\n          <Link\n            href=\"mailto:feedback@freechartonline.com\"\n            target=\"_blank\"\n          >\n            feedback@freechartonline.com\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}