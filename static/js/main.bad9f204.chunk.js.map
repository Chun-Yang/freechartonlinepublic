{"version":3,"sources":["utils/getReactDataSheetDataFromData.js","utils/constants.js","ChartTypeSelector.js","utils/getChartDataFromData.js","ChartDisplay.js","App.js","serviceWorker.js","index.js"],"names":["getReactDataSheetDataFromData","data","_data","Object","toArray","firstRow","rows","slice","rdsFirstRow","map","value","j","className","rdsRows","row","i","concat","toConsumableArray","CHART_TYPES","DEFAULT_REAL_DATA","DEFAULT_PADDING_DATA","times","length","DEFAULT_DATA","MUI_THEME","createMuiTheme","palette","primary","main","contrastText","secondary","ChartTypeSelector","_ref","chartType","onChartTypeChange","react_default","a","createElement","c","Chip_default","key","label","startCase","color","onClick","COLOR_SOLID","COLOR_TRANSPARENT","getChartDataFromData","_ref2","_ref2$","seriesNames","validRows","filter","rawRow","labels","datasets","_unzip","unzip","_unzip2","rawDataSet","index","dataset","borderColor","backgroundColor","fill","_ref3","getChartOptions","chartTitleText","title","display","text","position","elements","line","tension","scales","yAxes","ticks","beginAtZero","plugins","datalabels","align","anchor","ChartDisplay","Chart","pluginService","register","ChartDataLabels","_this$props","this","props","redraw","selectedChartType","es","id","type","options","Component","DownloadButton","Button_default","variant","filename","link","document","download","href","getElementById","toDataURL","click","downloadImage","App","state","_this2","Grid_default","container","spacing","styles","theme","item","xs","md","src_ChartDisplay","src_ChartTypeSelector","setState","lib_default","valueRenderer","cell","onCellsChanged","changes","forEach","col","Link_default","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bad9f204.chunk.js","sourcesContent":["export default function getReactDataSheetDataFromData(data) {\n  const [firstRow, ...rows] = data;\n  const rdsFirstRow = firstRow.map((value, j) => ({\n    value: value == null ? null : value,\n    className: j === 0 ? \"rds-chart-name read-only\" : \"read-only\"\n  }));\n  const rdsRows = rows.map((row, i) =>\n    row.map((value, j) => ({\n      value: value == null ? null : value,\n      className: j === 0 ? \"read-only\" : \"\"\n    }))\n  );\n  return [rdsFirstRow, ...rdsRows];\n}\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport times from \"lodash.times\";\n\n// NOTE: we do not support all charts\n// const CHART_TYPES = Object.keys(Chart.controllers);\n// CHART_TYPES.sort((x, y) => x.localeCompare(y));\n// NOTE: different charts\n// - bubble (multiple sources, specific data format: {x, y, r})\n// - scatter (multiple sources, specific data format: {x, y})\n// - bar, horizontalBar, line, radar (multiple sources)\n// - polarArea, pie, doughnut (one source or multiple source)\nexport const CHART_TYPES = [\n  \"bar\",\n  // 'bubble', // format {x, y, r}\n  // 'doughnut', // legend on labels\n  \"horizontalBar\",\n  \"line\",\n  // 'pie', // legend on labels\n  // 'polarArea', // legend on labels\n  \"radar\"\n  // 'scatter', // format {x, y}\n];\n\nconst DEFAULT_COLS = 4;\nconst DEFAULT_ROWS = 42;\nconst DEFAULT_REAL_DATA = [\n  [\"Charts Created Last Week\", \"Alice\", \"Bob\", \"Carol\"],\n  [\"Monday\", 43, 70, 67],\n  [\"Tuesday\", 88, 65, 35],\n  [\"Wednesday\", 73, 10, 66],\n  [\"Thursday\", 14, 59, 85],\n  [\"Friday\", 50, 78, 66],\n  [\"Saturday\", 59, 92, 0],\n  [\"Sunday\", 83, 27, 27]\n];\nconst DEFAULT_PADDING_DATA = times(\n  DEFAULT_ROWS - DEFAULT_REAL_DATA.length,\n  () => times(DEFAULT_COLS, () => null)\n);\n\nexport const DEFAULT_DATA = DEFAULT_REAL_DATA.concat(DEFAULT_PADDING_DATA);\n\nexport const MUI_THEME = createMuiTheme({\n  palette: {\n    primary: {\n      main: \"#36a2eb\",\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: \"#ff6384\",\n      contrastText: '#ffffff'\n    }\n  }\n});\n","import React from \"react\";\nimport Chip from \"@material-ui/core/Chip\";\nimport startCase from \"lodash.startcase\";\nimport { CHART_TYPES } from \"./utils/constants\";\n\nfunction ChartTypeSelector({ chartType, onChartTypeChange }) {\n  return (\n    <div className=\"chart-type-selector\">\n      {CHART_TYPES.map(c => (\n        <Chip\n          key={c}\n          label={startCase(c)}\n          color={c === chartType ? \"primary\" : \"default\"}\n          onClick={() => onChartTypeChange(c)}\n        />\n      ))}\n    </div>\n  );\n}\n\nexport default ChartTypeSelector;\n","import unzip from \"lodash.unzip\";\n\nconst COLOR_SOLID = [\n  \"rgba(54,162,235)\", // blue\n  \"rgba(255,206,86)\", // yellow\n  \"rgba(255,99,132)\" // red\n];\n\nconst COLOR_TRANSPARENT = [\n  \"rgba(54,162,235, 0.5)\", // blue\n  \"rgba(255,206,86, 0.5)\", // yellow\n  \"rgba(255,99,132, 0.5)\" // red\n];\n\nexport default function getChartDataFromData(\n  [[chartName, ...seriesNames], ...rawRows],\n  chartType\n) {\n  const validRows = rawRows.filter(rawRow => rawRow[0]);\n  if (validRows.length === 0) {\n    return {\n      labels: [],\n      datasets: []\n    };\n  }\n\n  const [labels, ...rawDatasets] = unzip(validRows);\n  const datasets = rawDatasets\n    .map((rawDataSet, index) => {\n      const dataset = {\n        label: seriesNames[index],\n        data: rawDataSet\n      };\n      switch (chartType) {\n        case \"bar\":\n        case \"horizontalBar\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_SOLID[index];\n          break;\n        case \"line\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_SOLID[index];\n          dataset.fill = false;\n          break;\n        case \"radar\":\n          dataset.borderColor = COLOR_SOLID[index];\n          dataset.backgroundColor = COLOR_TRANSPARENT[index];\n          break;\n        default:\n          break;\n      }\n      return dataset;\n    })\n    // we do not show data on chart if there is no series name\n    .filter(({ label }) => label);\n\n  return {\n    labels,\n    datasets\n  };\n}\n","import React, { Component } from \"react\";\nimport Chart from \"chart.js\";\nimport ChartDataLabels from \"chartjs-plugin-datalabels\";\nimport ChartComponent from \"react-chartjs-2\";\nimport getChartDataFromData from \"./utils/getChartDataFromData\";\n\nfunction getChartOptions({ chartTitleText, chartType }) {\n  const chartTitle = chartTitleText\n    ? {\n        display: true,\n        text: chartTitleText,\n        position: \"bottom\"\n      }\n    : null;\n  const scales = chartType !== 'radar'\n    ? {\n        yAxes: [\n          {\n            ticks: {\n              beginAtZero: true\n            }\n          }\n        ]\n      }\n    : null;\n  return {\n    title: chartTitle,\n    elements: {\n      line: {\n        tension: 0\n      }\n    },\n    scales,\n    plugins: {\n      datalabels: {\n        align: \"end\",\n        anchor: \"end\"\n      }\n    }\n  };\n}\n\nclass ChartDisplay extends Component {\n  componentDidMount() {\n    Chart.pluginService.register(ChartDataLabels);\n  }\n\n  render() {\n    const { redraw, data, selectedChartType, chartTitleText } = this.props;\n    return (\n      <ChartComponent\n        id=\"chart\"\n        redraw={redraw}\n        data={getChartDataFromData(data, selectedChartType)}\n        type={selectedChartType}\n        options={getChartOptions({\n          chartTitleText,\n          chartType: selectedChartType\n        })}\n      />\n    );\n  }\n}\n\nexport default ChartDisplay;\n","import React, { Component } from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\nimport Link from \"@material-ui/core/Link\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\nimport ReactDataSheet from \"react-datasheet\";\nimport \"react-datasheet/lib/react-datasheet.css\";\nimport \"./App.css\";\nimport getReactDataSheetDataFromData from \"./utils/getReactDataSheetDataFromData\";\nimport { CHART_TYPES, DEFAULT_DATA, MUI_THEME } from \"./utils/constants\";\nimport ChartTypeSelector from \"./ChartTypeSelector\";\nimport ChartDisplay from './ChartDisplay';\n\nfunction downloadImage(filename) {\n  const link = document.createElement(\"a\");\n  link.download = `${filename}.png`;\n  link.href = document.getElementById(\"chart\").toDataURL();\n  link.click();\n}\n\nfunction DownloadButton({ chartTitleText }) {\n  return (\n    <div className=\"download-btn-wrapper\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        className=\"download-btn\"\n        onClick={() => downloadImage(chartTitleText)}\n      >\n        DOWNLOAD IMAGE\n      </Button>\n    </div>\n  );\n}\n\nclass App extends Component {\n  state = {\n    selectedChartType: CHART_TYPES[0],\n    data: DEFAULT_DATA,\n    redraw: false\n  };\n\n  render() {\n    const chartTitleText = this.state.data[0][0];\n    return (\n      <div id=\"App\">\n        <Grid container spacing={24}>\n          <MuiThemeProvider theme={MUI_THEME}>\n            <Grid item xs={12} md={6}>\n              <ChartDisplay\n                redraw={this.state.redraw}\n                data={this.state.data}\n                selectedChartType={this.state.selectedChartType}\n                chartTitleText={chartTitleText}\n              />\n              <ChartTypeSelector\n                chartType={this.state.selectedChartType}\n                onChartTypeChange={selectedChartType => {\n                  this.setState({ selectedChartType, redraw: true });\n                }}\n              />\n              <DownloadButton chartTitleText={chartTitleText} />\n            </Grid>\n          </MuiThemeProvider>\n          <Grid item xs={12} md={6}>\n            <ReactDataSheet\n              data={getReactDataSheetDataFromData(this.state.data)}\n              valueRenderer={cell => cell.value}\n              onCellsChanged={changes => {\n                const data = this.state.data.map(row => [...row]);\n                changes.forEach(({ cell, row, col, value }) => {\n                  data[row][col] = value;\n                });\n                this.setState({ data, redraw: false });\n              }}\n            />\n          </Grid>\n        </Grid>\n        <div className=\"feedback-link-wrapper\">\n          <Link href=\"mailto:feedback@freechartonline.com\" target=\"_blank\">\n            feedback@freechartonline.com\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}